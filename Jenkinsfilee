
pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/CYBERCODERoss/NETFLIXclone.git'
            }
        }
        stage("Sonarqube Analysis ") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix '''
                }
            }
        }
        stage("quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
         stage('OWASP FS SCAN') {
    steps {
        script {
            // Set the NVD API key as an environment variable
            def nvdApiKeyCredentialId = 'NVD' <add environment variable/credentials of NVD API to Jenkins>

            // Use withCredentials to securely inject the API key into the environment variable
            withCredentials([string(credentialsId: nvdApiKeyCredentialId, variable: 'NVD')]) {
                // Run OWASP Dependency-Check scan
                def scanResult = dependencyCheck additionalArguments: "--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey $NVD", odcInstallation: 'DP-Check'
                echo "Dependency-Check scan completed successfully."
                echo "Result: $scanResult"
            }
        }
    }
}


        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
    }
stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh "docker build --build-arg TMDB_V3_API_KEY=<your API key> -t netflix ."
                       sh "docker tag netflix CYBERCODERoss/netflix:latest "
                       sh "docker push CYBERCODERoss/netflix:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image CYBERCODERoss/netflix:latest > trivyimage.txt"
            }
        }
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'krypttech4@gmail.com',
                attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}

